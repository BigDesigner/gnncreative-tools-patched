name: Build EXEs (PyInstaller)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  list-scripts:
    runs-on: ubuntu-latest
    outputs:
      scripts: ${{ steps.collect.outputs.scripts }}
    steps:
      - uses: actions/checkout@v4

      - id: collect
        run: |
          python -c "import json, pathlib; exclude={'_common.py','rdp_taramasi.py','rdp_acik_makine_tespiti.py'}; print(json.dumps([p.name for p in pathlib.Path('src').glob('*.py') if p.name not in exclude]))" > scripts.json
          echo "scripts=$(cat scripts.json)" >> "$GITHUB_OUTPUT"

  build:
    needs: list-scripts
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        script: ${{ fromJSON(needs.list-scripts.outputs.scripts) }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Compute names
        id: meta
        shell: pwsh
        run: |
          $name = [System.IO.Path]::GetFileNameWithoutExtension("${{ matrix.script }}")
          echo "name=$name" >> $env:GITHUB_OUTPUT

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          pyinstaller --onefile --clean "src\${{ matrix.script }}" --name "${{ steps.meta.outputs.name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.name }}
          path: dist\${{ steps.meta.outputs.name }}.exe
          if-no-files-found: error
